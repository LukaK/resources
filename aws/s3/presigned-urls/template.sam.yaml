Transform: AWS::Serverless-2016-10-31

Parameters:
  CognitoUserOneEmail:
    Description: Email address of the first created user
    Type: String

  CognitoUserTwoEmail:
    Description: Email address of the second created user
    Type: String

  StageName:
    Description: Api stage name
    Type: String
    Default: "dev"

Resources:

  MediaBucket:
    Type: AWS::S3::Bucket
    Properties: {}

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  UserPoolUserOne:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserOneEmail
      UserPoolId: !Ref UserPool

  UserPoolUserTwo:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserTwoEmail
      UserPoolId: !Ref UserPool


  IssuerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Handler: index.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /presignedurl
            Method: GET
            RequestParameters:
              - method.request.querystring.key:
                  Required: true
                  Caching: false
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
          Variables:
            BUCKET_NAME: !Ref MediaBucket
            TIER_ONE_USERNAME: !Ref UserPoolUserOne
            TIER_TWO_USERNAME: !Ref UserPoolUserTwo
      InlineCode: |
        import json
        import os
        import re

        import boto3
        from botocore.exceptions import ClientError


        def handler(event: dict, context: object) -> dict:
            key = event["queryStringParameters"]["key"]
            username = event["requestContext"]["authorizer"]["claims"]["email"]

            # access only to tier 1 and tier 2 folders permitted
            if not re.match(r"^(tier 1|tier 2)/.*jpg$", key):
                return {
                    "statusCode": 403,
                    "body": json.dumps(
                        {"message": "Not authorized to access non tier folders."}
                    ),
                }
            #
            if key.startswith("tier 2") and username != os.environ["TIER_TWO_USERNAME"]:
                return {
                    "statusCode": 403,
                    "body": json.dumps({"message": "Not authorized to access tier 2 data"}),
                }

            try:
                # generate pre signed url
                s3_client = boto3.client("s3")
                presigned_url = s3_client.generate_presigned_url(
                    "get_object",
                    Params={"Bucket": os.environ["BUCKET_NAME"], "Key": key},
                    ExpiresIn=3600,
                )

                return {
                    "statusCode": 200,
                    "body": json.dumps({"url": presigned_url}),
                }
            except ClientError as e:
                print(f"Error: {str(e)}")
                return {"statusCode": 500, "message": "Internal server error"}

Outputs:
  MyApiUrl:
    Description: Url of api gateway
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"

  CognitoUserPoolClientId:
    Description: Cognito user pool client id
    Value: !Ref UserPoolClient

  UserPoolId:
    Description: User pool id
    Value: !GetAtt UserPool.UserPoolId

  BucketName:
    Description: Bucket name
    Value: !Ref MediaBucket
